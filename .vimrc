"my configs
"
"ninja mode on
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>


"VUNDLE OPTIONS
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'
Bundle 'a.vim'
Bundle 'Mark'
Bundle 'The-NERD-tree'
Bundle 'The-NERD-Commenter'
Bundle 'mru.vim'
Bundle 'Auto-Pairs'
Bundle 'surround.vim'
Bundle 'Indent-Guides'
Bundle 'camelcasemotion'
Bundle 'argtextobj.vim'
Bundle 'vim-indent-object'
Bundle 'JSON.vim'
Bundle 'Tagbar'
Bundle 'EasyMotion'
Bundle 'davidhalter/jedi-vim'
Bundle 'closetag.vim'
Bundle 'octol/vim-cpp-enhanced-highlight'
Bundle 'Valloric/YouCompleteMe'
"plugins for colorschemes
"Bundle 'CSApprox'
Bundle "daylerees/colour-schemes", { "rtp": "vim-themes/"  }
"Plugin 'ScrollColors'
Plugin 'vim-scripts/Colour-Sampler-Pack'

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"VUNDLE END

set shellpipe=2>&1\ \|\ tee-ex
set nocp
set number " –í–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
"set relativenumber " –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
set nowrap " –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫
set backup
set undofile "—Ñ–∞–π–ª—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–µ–π—Å—Ç–≤–π
set noswapfile
set dir=~/.vim/vimswap "–∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–ø-—Ñ–∞–π–ª–æ–≤
set undodir=~/.vim/vimundo
set backupdir=~/.vim/vimbkp
set autochdir "—Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
set makeprg=make
if strlen($A)
    set makeprg=ymakevim
endif
set wcm=<Tab>
set noic
"set lazyredraw "–æ—Ç–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∞–∫—Ä–æ—Å–æ–≤
set list " –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
set listchars=tab:¬∑\ ,trail:¬∑ " –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
set hidden "–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
set fileencodings=utf-8,cp1251,koi8-r,cp866 " –°–ø–∏—Å–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
"set foldenable "–≤–∫–ª—é—á–∞–µ–º —Ñ–æ–ª–¥–∏–Ω–≥
"set fdm=syntax " –ú–µ—Ç–æ–¥ —Ñ–æ–ª–¥–∏–Ω–≥–∞ - –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
set keymap=russian-jcukenwin " –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ <C-^>
set iminsert=0 " –†–∞—Å–∫–ª–∞–¥–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
set imsearch=0
set switchbuf=useopen,usetab,newtab "–æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
let mapleader = "\\" "–±–∏–Ω–¥–∏–º <Leader> –∫–ª–∞–≤–∏—à—É
"set showtabline=2 "–í—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º –≤–∫–ª–∞–¥–∫–∏
"" Go to .proto on gf instead of .pb.h     
function GetIncludePath()
    let repo = $REPO_NAME
    let ret= fnamemodify(expand("%"), ":p:h:s?" . repo . "/.*$?" . repo . "?")
    let ret .= "/" . substitute(v:fname,'\\.pb\\.h$','.proto','')
    return ret
endfunction

set includeexpr=GetIncludePath()

"Indent and tabulation
set tabstop=4 " –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ
set shiftwidth=4 "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
set expandtab "–≤ —Ä–µ–∂–∏–º–µ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤. –¢–∞–∫ –∂–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç—Å—Ç—É–ø—ã, –¥–æ–±–∞–≤–ª—è–µ–º—ã–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ >> –∏ <<
"set autoindent " –ö–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
"set smarttab "–Ω–∞–∂–∞—Ç–∏–µ Tab –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –±—ã—Ç—å —Ç–æ—á–Ω–µ–µ, –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ–±–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ) –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ—Ç—Å—Ç—É–ø–∞, —à–∏—Ä–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç shiftwidth (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –≤ tabstop –∏ softtabstop). –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ Backspace —É–¥–∞–ª–∏—Ç –æ—Ç—Å—Ç—É–ø
set smartindent " –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ, —á—Ç–æ –∏ autoindent –ø–ª—é—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –≤ ¬´–Ω—É–∂–Ω—ã—Ö¬ª –º–µ—Å—Ç–∞—Ö. –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –æ—Ç—Å—Ç—É–ø —Å—Ç–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º {

set autoread " Set to auto read when a file is changed from the outside
set wildmenu "Turn on WiLd menu
set ruler "Always show current position

" –ö –ø—Ä–∏–º–µ—Ä—É, –µ—Å–ª–∏ –≤—ã –Ω–∞–±–µ—Ä–µ—Ç–µ 2d, —Ç–æ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ Vim –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Å—Ç—Ä–æ–∫—É 2d.
set showcmd
" –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
set statusline=%<%f%h%m%r%=format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P
"set statusline=%<%F%h%m%r%=type=%y\ format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P
set laststatus=2 "–ó–Ω–∞—á–µ–Ω–∏–µ 2 —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è;

"–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NerdTree
let NERDTreeQuitOnOpen=1

"–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è indent_guides
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2

"–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tagbar
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1

"–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è closetag
let g:closetag_html_style=1
source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

"jedi config
let g:jedi#popup_select_first=0

"–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YouComleteMe
let g:ycm_global_ycm_extra_conf ='~/.vim/.ycm_extra_conf.py'
nmap ] :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <c-w>] :sp<cr>:YcmCompleter GoToDefinitionElseDeclaration<CR>

" automatically open and close the popup menu / preview window
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
au InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" add json filetype
au! BufRead,BufNewFile *.json set filetype=json

"Preview window on the bottom of vim
function! PreviewDown()
    if !&previewwindow
        silent! wincmd P
    endif
    if &previewwindow
        silent! wincmd J
        silent! wincmd p
    endif
endf
au BufWinEnter * call PreviewDown()

" Configure syntax specific options
syntax on " syntax hilight on
syntax sync fromstart
filetype indent on
filetype plugin on

"prog langs configs
setlocal keywordprg=pydoc "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏ –ø–æ K –¥–ª—è —Å–ª–æ–≤–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º —Å –ø–æ–º–æ—â—å—é pydoc

"Tab autocompletion
function InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction

let python_highlight_all = 1

" MAPPINGS
" –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
nmap <F5> :TagbarToggle<CR>
nmap <F6> :NERDTreeToggle<CR>
"nmap <F6> :!~/bin/ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q ./<CR>
nmap <F12> :nohlsearch<CR>

"COLORS
set t_Co=256
colorscheme wombat256mod
"set cursorline

"–ë–µ–≥–∞–µ–º –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
nmap <c-p> :tabprevious<CR>
nmap <c-n> :tabnext<CR>
nmap p :bp<CR>
nmap n :bn<CR>
"end of my configs

" Encodings F9> EOL format (dos <CR><NL>,unix <NL>,mac <CR>)
    menu EOL.unix :set fileformat=unix<CR>
    menu EOL.dos :set fileformat=dos<CR>
    menu EOL.mac :set fileformat=mac<CR>
    menu EOL.my_win2unix :%s /\r\n/\r/g<CR>
    map <F9> :emenu EOL.<Tab>

"<F10> Change encoding
    menu Enc.cp1251 :e ++enc=cp1251<CR>
    menu Enc.koi8-r :e ++enc=koi8-r<CR>
    menu Enc.cp866 :e ++enc=ibm866<CR>
    menu Enc.utf-8 :e ++enc=utf-8<CR>
    menu Enc.ucs-2le :e ++enc=ucs-2le<CR>
    map <F10> :emenu Enc.<Tab>



function ShortTabLine()
    let ret = ''
    for i in range(tabpagenr('$'))
        " –ï—Å–ª–∏ –º—ã –∏–º–µ–µ–º –¥–µ–ª–æ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π ‚Äî –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –µ–µ –∫—Ä–∞—Å–Ω–æ–π
        if i + 1 == tabpagenr()
            let ret .= '%#errorMsg#'
        else
            let ret .= '%#TabLine#'
        endif
        " –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        let buflist = tabpagebuflist(i + 1)
        let winnr = tabpagewinnr(i + 1)
        let buffername = bufname(buflist[winnr - 1])
        let filename = fnamemodify(buffername, ':t')
        " –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî —Ç–æ —Ç–∞–∫ –∏ –≥–æ–≤–æ—Ä–∏–º '–±—É—Ñ–µ—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' (noname)
        if filename == ''
            let filename = 'noname'
        endif

        " –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 6 –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        "if strlen(filename) >= 8
        "    let ret .= '[' . filename[0:5] . '..]'
        "else
            let ret .= '[' . filename . ']'
        "endif
    endfor

    " –∑–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—à–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    let ret .= '%#TabLineFill#%T'
    return ret
endfunction


" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤–∫–ª–∞–¥–æ–∫
set tabline=%!ShortTabLine()

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END


" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
